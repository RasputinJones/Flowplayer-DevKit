/* * This file is part of Flowplayer, http://flowplayer.org * * By: Anssi Piirainen, <support@flowplayer.org> *Copyright (c) 2008, 2009 Flowplayer Oy * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.controls {	import org.flowplayer.util.Arrange;	import org.flowplayer.view.AbstractSprite;	import org.flowplayer.view.Flowplayer;		import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	
	/**	 * @author api	 */	public class TimeView extends AbstractSprite {		public static const EVENT_REARRANGE:String = "onRearrange";		private var _config:Config;		private var _timeText:TextField;		private var _durationText:TextField;		private var _prevTextLength:Number = "00:00".length;		private var _player:Flowplayer;		public function TimeView(config:Config, player:Flowplayer) {			_config = config;			_player = player;			createTimeText();			createDurationText();			duration = 0;			time = 0;		}				public function redraw(_config:Config):void {			_timeText.textColor = _config.style.timeColor;			if (_durationText) {				_durationText.textColor = _config.style.durationColor;			}		}				public function set time(value:Number):void {			_timeText.text = formatSeconds(value);			if (_durationText) {				_timeText.appendText("/");			}			onResize();						var textLength:Number = _timeText.text.length + (_durationText ? _durationText.text.length : 0);			if (textLength != _prevTextLength)				dispatchEvent(new Event(EVENT_REARRANGE));			_prevTextLength = textLength;		}				public function set duration(value:Number):void {			if (value == -1 && _durationText) {				removeChild(_durationText);				_durationText = null;				onResize();				dispatchEvent(new Event(EVENT_REARRANGE));				return;			} else if (value > 0 && ! _durationText) {				createDurationText();				onResize();				dispatchEvent(new Event(EVENT_REARRANGE));			}			if (_durationText) {				var text:String = formatSeconds(value);				if (text == _durationText.text)					return;				resizeFont(text.length);				_durationText.text = text;			}		}				private function resizeFont(durationLength:int):void {			var fontSize:Number = durationLength > "00:00".length ? 9 : 11;						initField(_durationText, _config.style.durationColor, fontSize);			initField(_timeText, _config.style.timeColor, fontSize);			onResize();		}		override protected function onResize():void {			_timeText.x = 5;			Arrange.center(_timeText, 0, height);			if (_durationText) {				_durationText.x = _timeText.x + _timeText.textWidth + 2;				Arrange.center(_durationText, 0, height);			}			drawBackground();		}		private function drawBackground():void {			graphics.clear();			graphics.lineStyle(1, 0, .3);			graphics.beginFill(_config.style.buttonColor, 1);			var bgWidth:Number = (_durationText ? (_durationText.x + _durationText.width) : (_timeText.x + _timeText.width)) + 5;			graphics.drawRoundRect(0, 0, bgWidth, height, Math.floor(height / 2), Math.floor(height / 2));			graphics.endFill();						// reset the manged width value			_width = bgWidth;		}		private function createDurationText():void {			_durationText = _player.createTextField();			initField(_durationText, _config.style.durationColor);			addChild(_durationText);		}		private function createTimeText():void {			_timeText = _player.createTextField();			initField(_timeText, _config.style.timeColor);			addChild(_timeText);		}		private function initField(field:TextField, color:Number, size:Number = 13):void {			if (! field) return;			field.textColor = color;			field.selectable = false;			field.autoSize = TextFieldAutoSize.LEFT;			var format:TextFormat = field.defaultTextFormat;			format.size = size;			field.defaultTextFormat = format;		}				private function formatSeconds(sec:Number):String {			if (isNaN(sec))				return "00:00";			var t:String = "";						var min:Number = Math.floor(sec/60);			var seconds:int = int(sec) % 60;			t = two(seconds);								var hr:Number = Math.floor(min/60);			min = min % 60;			t = two(min) + ":" + t;						if (hr == 0) return t;						var day:Number = Math.floor(hr/60);			hr = hr % 60;			t = two(hr) + ":" + t;						if (day == 0) return t;						t = day + ":" + t;						return t;		}				private function two(x:Number):String {			return ((x>9) ? "" : "0") + x;		}
	}}