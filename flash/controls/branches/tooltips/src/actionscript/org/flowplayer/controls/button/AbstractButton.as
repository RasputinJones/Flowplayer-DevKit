/* * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2008 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */ package org.flowplayer.controls.button {	import flash.display.DisplayObject;
	import flash.display.DisplayObjectContainer;
	import flash.display.Sprite;
	import flash.events.MouseEvent;
	import flash.geom.ColorTransform;
	
	import org.flowplayer.controls.Config;
	import org.flowplayer.util.Log;	

	/**	 * @author api	 */	public class AbstractButton extends Sprite {				private var _config:Config;		private var _face:DisplayObjectContainer;		protected static const BACK_INSTANCE_NAME:String = "back";		protected var log:Log = new Log(this);		
		public function AbstractButton(config:Config) {			_config = config;			_face = createFace();			if (_face)				addChild(_face);			onMouseOut();			enabled = true;		}						public function redraw(config:Config):void {			_config = config;			onMouseOut();		}				public function set enabled(value:Boolean) :void {			clickListenerEnabled = value;			buttonMode = value;			var func:String = value ? "addEventListener" : "removeEventListener";			this[func](MouseEvent.MOUSE_OVER, onMouseOver);				this[func](MouseEvent.MOUSE_OUT, onMouseOut);			alpha = value ? 1 : 0.5;		}		protected function set clickListenerEnabled(enabled:Boolean):void {		}				private function transformColor(disp:DisplayObject, redOffset:Number, greenOffset:Number, blueOffset:Number):void {			log.debug("transformColor");			if (! disp) return;			var transform:ColorTransform = new ColorTransform(0, 0, 0, 1, redOffset, greenOffset, blueOffset, 0);			disp.transform.colorTransform = transform;		}		protected function onMouseOut(event:MouseEvent = null):void {			log.debug("onMouseOut");			resetDispColor(_face.getChildByName(BACK_INSTANCE_NAME));		}		protected function onMouseOver(event:MouseEvent):void {			log.debug("onMouseOver");			transformDispColor(_face.getChildByName(BACK_INSTANCE_NAME));		}				protected function transformDispColor(disp:DisplayObject):void {			log.debug("mouse over colors", _config.style.buttonOverColorRGB);			transformColor(disp, _config.style.buttonOverColorRGB[0], _config.style.buttonOverColorRGB[1], _config.style.buttonOverColorRGB[2]);		}				protected function resetDispColor(disp:DisplayObject):void {			log.debug("normal colors", _config.style.buttonColorRGB);			transformColor(disp, _config.style.buttonColorRGB[0], _config.style.buttonColorRGB[1], _config.style.buttonColorRGB[2]);		}		protected function createFace():DisplayObjectContainer {			log.error("createFace is not overridden");			return null;		}	}}