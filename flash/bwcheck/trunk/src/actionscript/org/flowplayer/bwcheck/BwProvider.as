/*     *    Copyright 2008 Anssi Piirainen * *    This file is part of FlowPlayer. * *    FlowPlayer is free software: you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation, either version 3 of the License, or *    (at your option) any later version. * *    FlowPlayer is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with FlowPlayer.  If not, see <http://www.gnu.org/licenses/>. */package org.flowplayer.bwcheck {	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.SharedObject;		import mx.utils.StringUtil;		import org.flowplayer.bwcheck.servers.FMSServerClientBandwidth;	import org.flowplayer.bwcheck.servers.HttpServerClientBandwidth;	import org.flowplayer.bwcheck.servers.WowzaServerClientBandwidth;	import org.flowplayer.controller.ClipURLResolver;	import org.flowplayer.controller.StreamProvider;	import org.flowplayer.model.Clip;	import org.flowplayer.model.PluginModel;	import org.flowplayer.util.Log;	import org.flowplayer.util.PropertyBinder;    import org.red5.flash.bwcheck.BandwidthDetection;    import org.red5.flash.bwcheck.IBandwidthDetection;import org.red5.flash.bwcheck.ServerClientBandwidth;	import org.red5.flash.bwcheck.events.BandwidthDetectEvent;	/**	 * A RTMP stream provider with fallback and clustering support. Supports following:	 * <ul>	 * <li>Starting in the middle of the clip's timeline using the clip.start property.</li>	 * <li>Stopping before the clip file ends using the clip.duration property.</li>	 * <li>Ability to combine a group of clips into one gapless stream.</li>	 * <li>Ability to fallback to a list of servers in a cluster server farm.</li>	 * <li>Ability to recognise, store and leave out any failed servers for a given time.</li>	 * <li>Ability to randomly connect to a server in the servers list mimicking a round robin connection.</li>	 * <li>Works with a traditional load balancing appliance by feeding its host at the top of the list, and direct connections to the servers happen on fallback.</li>	 * </ul>	 * <p>	 * Stream group is configured in a clip like this:	 * <code>	 * { streams: [ { url: 'metacafe', duration: 20 }, { url: 'honda_accord', start: 10, duration: 20 } ] }	 * </code>	 * The group is played back seamlessly as one gapless stream. The individual streams in a group can	 * be cut out from a larger file using the 'start' and 'duration' properties as shown in the example above.	 * 	 * <p> 	 * To enable server fallback a hosts config property is required in the plugins config like this:	 * 	 * hosts: [	 *	       'rtmp://server1.host.com/myapp',	 *	       'rtmp://server2.host.com/myapp',	 *	       'rtmp://server3.host.com/myapp',	 *	      ]	 * 	 * <p>	 * To enable the fallback feature to store (client side) failed servers to prevent reattempting those connections the failureExpiry config property is required like so:	 * failureExpiry: 3000,	 * 	 * <p> This tells the feature to wait for 3000 milliseconds before allowing connection attempts again. 	 * 	 * <p>	 * To enable round robin connections the loadBalanceServers config property requires to be enabled like so:	 * 	 * loadBalanceServers: true	 * 	 * <p>	 * Advanced configurations for the fallback feature can be enabled like so:	 * 	 * connectTimeout: 5000,	 * connectCount: 3	 * encoding: 0	 * 	 * <p> connectTimeout is the time in milliseconds before each reconnection attempt.	 * connectCount is the ammount of times connection reattmps will occur before giving up.	 * encoding is the AMF encoding version either 0 or 3 for AMF3.	 * 	 * <p> Two custom events a fired during connection attempts and fallback, these are:	 * 	 * <ul>	 * <li>RTMPEventType.RECONNECTED - onReconnect</li>	 * <li>RTMPEventType.FAILED - onFailed</li>	 * </ul>	 * 	 * @author danielr	 */	public class BwProvider implements ClipURLResolver  {		private var _config:BWConfig;		private var log:Log = new Log(this);		private var _connection:NetConnection;		private var _successListener:Function;		private var _failureListener:Function;		private var _clip:Clip;		private var _rest:Array;		private var _startAfterConnect:Boolean;		private var _hasDetectedBW:Boolean = false;		private var _detectionClass:Class;		private var _serviceMethod:String;		private var _bitrate:Number;		private var _chosenBitrate:String;		private var _bitrateProfile:SharedObject = SharedObject.getLocal("bitrateProfile","/");		private var _ncURI:String;		private var _provider:StreamProvider;        public function onConfig(model:PluginModel):void {            log.debug("onConfig");             _config = new PropertyBinder(new BWConfig(), null).copyProperties(model.config) as BWConfig;             _chosenBitrate = _bitrateProfile.data.chosenBitrate;             model.dispatchOnLoad();        }                protected function hasDetectedBW():Boolean		{			if (_bitrateProfile.data.detectedBitrate || _hasDetectedBW) return true;			return false;		}                						public function set onFailure(listener:Function):void {			_failureListener = listener;		}				/**		 * Start the bandwidth check connection depending on the serverType.		 * By default the FMS implementation requires a true property to the first of the connection arguments.		 * The other server implementations don't require this as they use AMF service callback methods.		 */		public function doBWConnect():void		{			_connection = new NetConnection();			_connection.addEventListener(NetStatusEvent.NET_STATUS, _onConnectionStatus);			_connection.close();			switch(_config.serverType)			{					case "fms":						_connection.connect(_config.netBWConnectionUrl, true);					break;					case "wowza":						_connection.connect(_config.netBWConnectionUrl);					break;					case "http":						_connection.connect(null);					break;					default:						_connection.connect(_config.netBWConnectionUrl);					break;			}		}						public function handeNetStatusEvent(event:NetStatusEvent):Boolean		{			return true;		}				protected function _onConnectionStatus(event:NetStatusEvent):void {						if (!hasDetectedBW())			{				switch (event.info.code) 				{					//connection is successful stop any reconnection attempts					case "NetConnection.Connect.Success":						doDetection();						//stopReconnect();					break;					//connection has failed, reattempt using the fallback system					case "NetConnection.Connect.Failed":						log.info("Couldnt connect to " + _connection.uri);					break;					//connection has closed					case "NetConnection.Connect.Closed":							break;				}			}			//super.onNetStatus(event);						//log.debug(event.info.code);		}					/**		 * Determine the server type to choose which way to handle the bandwidth detection and run the detection.		 */		protected function doDetection():void		{			log.debug("detecting bandwidth");			//dispatchEvent(new ClipEvent(BWDetectEventType.DETECT_START));            var detect:IBandwidthDetection;			switch(_config.serverType)			{                case "fms":					detect = new FMSServerClientBandwidth();				    break;				case "wowza":					detect = new WowzaServerClientBandwidth();				    break;				case "http":					detect = new HttpServerClientBandwidth();					HttpServerClientBandwidth(detect).url = _config.netBWConnectionUrl;				    break;				default:						detect = new ServerClientBandwidth();					detect.service = "bwCheckService.onServerClientBWCheck";			}            detect.addEventListener(BandwidthDetectEvent.DETECT_COMPLETE, onServerClientComplete);            detect.addEventListener(BandwidthDetectEvent.DETECT_STATUS, onServerClientStatus);            detect.addEventListener(BandwidthDetectEvent.DETECT_FAILED, onDetectFailed);            detect.connection = _connection;            detect.start();		}				/**		 * Called when a detection has failed		 */		public function onDetectFailed(event:BandwidthDetectEvent):void		{			event.stopPropagation();			log.error("\n Detection failed with error: " + event.info.application + " " + event.info.description);			//dispatchEvent(new ClipEvent(BWDetectEventType.DETECT_FAILED));		}				/**		 * Called when a detection has completed and set the bandwidth properties from the returned values		 */		 		public function onServerClientComplete(event:BandwidthDetectEvent):void		{			event.stopPropagation();			log.info("\n\n kbit Down: " + event.info.kbitDown + " Delta Down: " + event.info.deltaDown + " Delta Time: " + event.info.deltaTime + " Latency: " + event.info.latency);			_hasDetectedBW = true;						// Set the detected bandwidth			_bitrate = event.info.kbitDown;						// Choose a rate from the given bitrates list or return the default rate			_chosenBitrate = getBitrate(_bitrate, _config.bitrates, _config.defaultBitrate, _config.closestRateInterval);						log.debug("bitrate (kbitDown) " + _bitrate.toString());			log.info("mapped to bitrate " + _chosenBitrate);			// Store the bitrate to prevent further bitrate detections			rememberBitrate(_chosenBitrate, _bitrate);			//dispatchEvent(new ClipEvent(BWDetectEventType.DETECT_COMPLETE));			_connection.close();				_connection.connect(_ncURI);			_successListener(getClipName());					}				/**		 * Called during the bitrate detection checking and return its status		 */		public function onServerClientStatus(event:BandwidthDetectEvent):void		{				if (event.info) {				log.info("\n count: "+event.info.count+ " sent: "+event.info.sent+" timePassed: "+event.info.timePassed+" latency: "+event.info.latency+" cumLatency: " + event.info.cumLatency);				//dispatchEvent(new ClipEvent(BWDetectEventType.DETECT_STATUS));			}		}				/**		 * Returns the chosen bitrate		 */		public function getChosenBitrate():String		{			return _chosenBitrate;		}				/**		 * Returns the detected bitrate		 */		public function getDetectedBitrate():int		{			return _bitrate;		}				/**		 * Determine the chosen bitrate from a given list of bitrates		 * The default bitrate is chosen on fallback of choosing a rate.		 * The highest possible rate is chosen if a clients bandwidth is above or below the highest rate determined by the closestRateInterval config property.		 */		protected function getBitrate(kBDown:int, bitrates:Array, defaultBitrate:String, closestRateInterval:int):String		{			var bitrate:String = defaultBitrate;			var rates:Array = bitrates.concat();				rates.sort(Array.NUMERIC, Array.DESCENDING).reverse()						var largest_rate:String = rates[0];									for (var i:int = 0; i < rates.length; i++) {				if (kBDown >= Number(largest_rate))				{					bitrate = largest_rate;					return bitrate;				} else if (kBDown >= (rates[i] - closestRateInterval)) {					bitrate = rates[i];					return bitrate;				} else if (kBDown < Number(rates[i])) {					bitrate = rates[i];				}			}							return bitrate;		}				/**		 * Store the detection and chosen bitrate if the rememberBitrate config property is set.		 */		protected function rememberBitrate(chosenBitrate:String, detectedBitrate:int):void		{						if (_config.rememberBitrate) {				_bitrateProfile.data.chosenBitrate = chosenBitrate;				_bitrateProfile.data.detectedBitrate = detectedBitrate;			}		}				public function resolve(provider:StreamProvider, clip:Clip, successListener:Function):void {			_bitrateProfile.clear();			_provider = provider;			_connection = provider.netConnection;			_successListener = successListener;			_clip = clip;						_ncURI = _connection.uri;			_connection.close();			if (!hasDetectedBW())			{							doBWConnect();			} else {				_successListener(getClipName());							}					}				protected function getClipName():String		{			var name:String;			var ext:String;			if (_clip.url.lastIndexOf(".") > 0)			{				name = _clip.url.substring(0,_clip.url.lastIndexOf("."));				ext = _clip.url.substring(_clip.url.lastIndexOf(".") + 1,_clip.url.length);			} else {				name = _clip.url;				ext = "";			}			var file:String = StringUtil.substitute(_config.fileNameString,name,_chosenBitrate,ext);			log.info("Resolved stream url: " + file);				return file;		}				public static function isRtmpUrl(url:String):Boolean {			return url && url.toLowerCase().indexOf("rtmp") == 0;		}					}}