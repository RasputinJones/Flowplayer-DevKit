/* * This file is part of Flowplayer, http://flowplayer.org * * By: Daniel Rossi, <electroteque@gmail.com> * Copyright (c) 2009 Electroteque Multimedia * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.related {	import com.adobe.serialization.json.JSON;		import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BlendMode;	import flash.events.MouseEvent;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import org.flowplayer.controller.ResourceLoader;	import org.flowplayer.controller.ResourceLoaderImpl;	import org.flowplayer.model.ClipEvent;	import org.flowplayer.model.DisplayPluginModel;	import org.flowplayer.model.DisplayProperties;	import org.flowplayer.model.PlayerError;	import org.flowplayer.model.Plugin;	import org.flowplayer.model.PluginEventType;	import org.flowplayer.model.PluginModel;	import org.flowplayer.util.PropertyBinder;	import org.flowplayer.view.ErrorHandler;	import org.flowplayer.model.ErrorCode;	import org.flowplayer.view.Flowplayer;	import org.flowplayer.view.StyleableSprite;		import org.flowplayer.related.assets.MaximizeBtn;			/**	 * A Subtitling and Captioning Plugin. Supports the following:	 * <ul>	 * <li>Loading subtitles from the Timed Text or Subrip format files.</li>	 * <li>Styling text from styles set in the Time Text format files.</li>	 * <li>Loading subtitles or cuepoints from a JSON config.</li>	 * <li>Loading subtitles or cuepoints from embedded FLV cuepoints.</li>	 * <li>Controls an external content plugin.</li>	 * <li>Working with the Javascript captions plugin, it enables a scrolling cuepoint thumbnail menu.</li>	 * </ul>	 * <p>	 * To setup an external subtitle caption file the config would look like so:	 * 	 * captionType: 'external'	 * 	 * For Timed Text	 *	 * captionUrl: 'timedtext.xml'	 * 	 * For Subrip	 * 	 * captionUrl: 'subrip.srt'	 * 	 * <p>	 * To enable the captioning to work properly a caption target must link to a content plugin like so:	 * 	 * captionTarget: 'content'	 * 	 * Where content is the config for a loaded content plugin.	 *	 * <p>	 * 	 * To be able to customised the subtitle text a template string is able to tell the captioning plugin	 * which text property is to be used for the subtitle text which is important for embedded cuepoints. It also	 * enables to add extra properties to the text like so:	 * 	 * template: '{text} {time} {custom}' 	 * 	 * <p>	 * To enable simple formatting of text if Timed Text has style settings, 	 * only "fontStyle", "fontWeight" and "textAlign" properties are able to be set like so:	 * 	 * simpleFormatting: true	 * 	 * @author danielr	 */	public class RelatedVideo extends StyleableSprite implements Plugin, ErrorHandler {				private var _player:Flowplayer;		private var _model:PluginModel;		private var _config:Config;		private var _loader:ResourceLoader;		private var _relatedClips:Array;		private var oldDisplayProperties:DisplayProperties;		private var _isRelatedVideosOpen:Boolean = false;		private var coverFlow:CoverFlow;		private var _currentIndex:Number = 0;		private var _viewModel:DisplayPluginModel;		private var _captionView:*;		private var _text:TextField;		private var _defaultText:String;		private var screen:DisplayProperties;		private var _coverFlowData:Array = [];			//[Embed(source="../../../../flash/maximize.png")]       // private var maximizeBtn:Class;        //private var maximizeBtnObj:Bitmap;                 //private var maximizeBtn:Sprite;				private var maximizeBtn:Sprite;       //[Embed(source="../../../../flash/nextBtn.png")]       // public var nextBtn:Class;       // private var nextBtnObj:Bitmap;                // [Embed(source="../../../../flash/prevBtn.png")]       // public var prevBtn:Class;       // private var prevBtnObj:Bitmap;             		public function RelatedVideo() {					}				/**		 * Sets the plugin model. This gets called before the plugin		 * has been added to the display list and before the player is set.		 * @param plugin		 */		public function onConfig(plugin:PluginModel):void {			_model = plugin;			_config = new PropertyBinder(new Config(), null).copyProperties(plugin.config) as Config;			if (plugin.config) {			}					}								override protected function onResize():void {			//_text.setSize(width, height);			_text.x = 0;			_text.y = height + 30;						coverFlow.width = stage.width;			//coverFlow.height = stage.height;			//coverFlow.x = 0;			//coverFlow.y = 0;			//coverFlow.height = _config.height;			//coverFlow.width = _config.width;								}				private function createTextField():void {						//var screen:DisplayProperties = _player.pluginRegistry.getPlugin("screen") as DisplayProperties;									if (_text) {				removeChild(_text);			} 			_text = _player.createTextField();			_text.blendMode = BlendMode.LAYER;			_text.autoSize = TextFieldAutoSize.CENTER;			_text.wordWrap = true;			_text.multiline = true;			_text.antiAliasType = AntiAliasType.ADVANCED;			_text.condenseWhite = true;					_text.visible = false;			addChild(_text);							}				/**		 * Sets the Flowplayer interface. The interface is immediately ready to use, all		 * other plugins have been loaded an initialized also.		 * @param player		 */		public function onLoad(player:Flowplayer):void {			_player = player;			_player.playlist.onBeforeBegin(onBegin);			_player.playlist.onLastSecond(onBeforeFinish);			_loader = _player.createLoader();						createTextField();												coverFlow = new CoverFlow({			imageWidth: 150,			height: _config.height,			width: width,			items: _config.items,			imageHeight: _config.thumbHeight,			horizontalSpacing: _config.horizontalSpacing,			relfectionSpacing: _config.relfectionSpacing,			showReflection: _config.showReflection,			maskRatio: _config.maskRatio,			mouseOutListener: onMouseOut,			mouseOverListener: onMouseOver,			mouseClickListener: onMouseClick			});															coverFlow.alpha = 0;						addChild(coverFlow);						//maximizeBtnObj = new maximizeBtn() as Bitmap;						maximizeBtn = new MaximizeBtn() as Sprite;			_player.addToPanel(maximizeBtn, {right:0, bottom:0, zIndex: 100});						maximizeBtn.visible = false;						_model.dispatchOnLoad();					}				private function playSelectedClip(index:int):void		{			if (_relatedClips[index]) {				close();				//coverFlow.visible = false;				_player.close();				_player.play(_relatedClips[index]);			}		}				public function onMouseClick(selectedIndex:int):void		{			playSelectedClip(selectedIndex);		}				public function onMouseOut():void		{			_text.htmlText = _defaultText;		}				public function onMouseOver(selectedIndex:int):void		{			_text.htmlText = _relatedClips[selectedIndex].customProperties.title;		}				private function isLastItem():Boolean		{			return _player.playlist.currentIndex + 1 >= _player.playlist.length;			}				private function onBeforeFinish(event:ClipEvent):void		{			clear();			coverFlow.clear();			openRelatedClips();						show();					}				private function onFinish(event:ClipEvent):void		{			show();		}			protected function loadRelatedClips(clips:Array):void		{			for (var i:int = 0; i < clips.length; i++)			{					 _coverFlowData.push(clips[i].customProperties[_config.image]);			}			coverFlow.data = _coverFlowData;						_defaultText = "1 - " + _relatedClips.length + " of " + _relatedClips.length;			_text.htmlText = _defaultText;		}				protected function getRelatedClips(related:*):void		{			if (related is Array)			{				log.debug("Loading related videos from config");				_relatedClips = _player.createClips(related);				_defaultText = "1 - " + _relatedClips.length + " of " + _relatedClips.length;				_text.htmlText = _defaultText;				loadRelatedClips(_relatedClips);			} else if (related is String) {				var loader:ResourceLoaderImpl = new ResourceLoaderImpl(null, this);				loader.load(related, onComplete, true);				log.debug("Loading related videos from external config " + related);			}		}				private function clear():void		{			_relatedClips = null;			_currentIndex = 0;			}				protected function onBegin(event:ClipEvent):void {						close();		}				private function openRelatedClips():void		{			if (_player.currentClip.customProperties.related != null)			{				getRelatedClips(_player.currentClip.customProperties.related);			} else if (_config.related != null) {				log.debug("Loading related clips from default config");				getRelatedClips(_config.related);			}		}		public function getDefaultConfig():Object {			return {};		}				public function onComplete(loader:ResourceLoader):void		{			_relatedClips = _player.createClips(JSON.decode(loader.getContent().toString()));			loadRelatedClips(_relatedClips);		}					[External]		public function open():void		{			if (!_isRelatedVideosOpen) show();		}				[External]		public function show():void		{				//coverFlow.visible = true;				screen = _player.pluginRegistry.getPlugin("screen") as DisplayProperties;				oldDisplayProperties = screen;				_player.animationEngine.animate(coverFlow, {alpha:1}, 0.5);				_text.visible = true;				_player.animationEngine.animate(screen.getDisplayObject(), _config.screen, 400, showRelatedVideos);		}				private function showRelatedVideos():void		{						_model.dispatch(PluginEventType.PLUGIN_EVENT, "onShow");			_isRelatedVideosOpen = true;												maximizeBtn.visible = true;			maximizeBtn.x = _config.screen.width - maximizeBtn.width;			maximizeBtn.y = _config.screen.height - maximizeBtn.height;				maximizeBtn.addEventListener(MouseEvent.CLICK, onMaximize);			//if (_text) _text.htmlText = _defaultText;			}						private function onMaximize(event:MouseEvent):void		{						//screen.getDisplayObject().parent.removeChild(maximizeBtnObj);			close();		}				private function closeRelatedVideos():void		{			log.error("closed");			_model.dispatch(PluginEventType.PLUGIN_EVENT, "onClose");			_isRelatedVideosOpen = false;		}				[External]		public function close():void		{			if (_isRelatedVideosOpen) {				log.error("closing");				maximizeBtn.visible = false;				_model.dispatch(PluginEventType.PLUGIN_EVENT, "onBeforeClose");				_player.animationEngine.animate(coverFlow, {alpha:0}, 0.5);				_text.visible = false;				_text.htmlText = "";				_player.animationEngine.animate(oldDisplayProperties.getDisplayObject(), oldDisplayProperties, 400, closeRelatedVideos);			}		}				[External]		public function setItems(items:Array):void		{			_relatedClips = items;		}				[External]		public function click(index:int):void		{			playSelectedClip(index);		}				public function showError(message:String):void		{					}				public function handleError(error:ErrorCode, info:Object = null, throwError:Boolean = true):void		{					}	}}